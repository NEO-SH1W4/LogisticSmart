[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "logistic-smart"
version = "2.0.0"
description = "Sistema Inteligente de AnÃ¡lise de Entregas"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "NEO-SH1W4"},
]
keywords = [
    "logistics",
    "delivery", 
    "analysis",
    "streamlit",
    "dashboard",
    "reporting",
    "excel",
    "csv",
    "data-processing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "streamlit>=1.31.0",
    "pandas>=2.0.0", 
    "numpy>=1.24.0",
    "openpyxl>=3.1.0",
    "plotly>=5.15.0",
    "altair>=5.0.0",
    "bcrypt>=4.0.0",
    "python-dotenv>=1.0.0",
    "python-docx>=0.8.11",
    "pdfkit>=1.0.0",
    "pywin32>=306;sys_platform=='win32'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/NEO-SH1W4/LogisticSmart"
Documentation = "https://github.com/NEO-SH1W4/LogisticSmart#readme"
Repository = "https://github.com/NEO-SH1W4/LogisticSmart.git"
"Bug Tracker" = "https://github.com/NEO-SH1W4/LogisticSmart/issues"
Demo = "https://logisticsmartx33beta.streamlit.app/"

[project.scripts]
logistic-smart = "logistic_smart.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
logistic_smart = [
    "templates/*.html",
    "static/*.css", 
    "static/*.js",
    "config/*.toml",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["logistic_smart"]
skip = ["__init__.py"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "altair.*",
    "openpyxl.*",
    "docx.*",
    "pdfkit.*",
]
ignore_missing_imports = true

